如果外部函数类型在Solidity的上下文环境以外的地方使用，他们会被视为function类型。
编码为20字节的函数所在地址，紧跟4字节的函数方法签名2的共占24字节的bytes24类型。

复杂类型，如数组(arrays)和数据结构(struct)在Solidity中有一个额外的属性，数据的存储位置。
可选为memory和storage。

默认的函数参数，包括返回的参数，他们是memory。默认的局部变量是storage的1。
而默认的状态变量（合约声明的公有变量）是storage。

将一个storage的状态变量，赋值给一个storage的局部变量，是通过引用传递。所以对于局部变量的修改，
同时修改关联的状态变量。但另一方面，将一个memory的引用类型赋值给另一个memory的引用，不会创建另一个拷贝。
需要注意的是在函数中，将一个struct赋值给一个局部变量（默认是storage类型），实际是拷贝的引用，
所以修改局部变量值时，会影响到原变量。
pragma solidity ^0.4.0;

contract C {
    uint[] x; // the data location of x is storage

    // the data location of memoryArray is memory
    function f(uint[] memoryArray) {
        x = memoryArray; // works, copies the whole array to storage
        var y = x; // works, assigns a pointer, data location of y is storage
        y[7]; // fine, returns the 8th element
        y.length = 2; // fine, modifies x through y
        delete x; // fine, clears the array, also modifies y
        // The following does not work; it would need to create a new temporary /
        // unnamed array in storage, but storage is "statically" allocated:
        // y = memoryArray;
        // This does not work either, since it would "reset" the pointer, but there
        // is no sensible location it could point to.
	// 下面的操作为报错，因为删除是一个赋值操作，不能向引用类型的storage直接赋值从而报错
        // delete y;
        g(x); // calls g, handing over a reference to x
        h(x); // calls h and creates an independent, temporary copy in memory
    }

    function g(uint[] storage storageArray) internal {}
    function h(uint[] memoryArray) {}
}

bytes和string是一种特殊的数组。bytes类似byte[]，但在外部函数作为参数调用中，会进行压缩打包，更省空间，
所以应该尽量使用bytes4。string类似bytes，但不提供长度和按序号的访问方式。
通过数组字面量，创建的数组是memory的，同时还是定长的。
	
Only arrays(including bytes and string)are stored in storage by default. Anything under 32 bytes is just kept on the stack. 
If you are setting things to zero when the function ends, you should be explicitly declaring them as memory variables, not using storage. 


delete运算符，用于将某个变量重置为初始值。

在私链(private blockchain)上运行sha256,ripemd160或ecrecover可能会出现Out-Of-Gas报错。因为它们实现了一种预编译的机制，
但合约要在收到第一个消息后才会存在。向一个不存在的合约发送消息，非常昂贵，所以才会导致Out-Of-Gas的问题。
一种解决办法是每个在你真正使用它们前，先发送1 wei到这些合约上来完成初始化。在官方和测试链上没有这个问题。

使用address.send方法需要注意，调用栈深不能超过1024，或gas不足，都将导致发送失败。使用为了保证你的ether安全，要始终检查返回结果。

internal function invoke through jump instruction.表达式this.g(8);和c.g(2)（这里的c是一个合约实例）是外部调用函数的方式。
实现上是通过一个消息调用，而不是直接通过EVM的指令跳转。需要注意的是，在合约的构造器中，不能使用this调用函数，因为当前合约还没有创建完成。

使用payable关键字declare a function，否则不能通过msg.value()选项来接收ether from other contract


抛出异常的效果是当前的执行被终止且被撤销(值的改变和帐户余额的变化都会被回退（throw:指令0xfd; 运行时异:指令0xfe）)。
异常还会通过Solidity的函数调用向上冒泡(bubbled up)传递。（send，和底层的函数调用call,delegatecall，callcode是一个例外，
当发生异常时，这些函数返回false）。
捕捉异常是不可能的（或许因为异常时，需要强制回退的机制）。
通过assert判断内部条件是否达成，require验证输入的有效性。这样的分析工具，可以假设正确的输入，减少错误。这样无效的操作码将永远不会出现。


编译器为自动为所有的public的状态变量创建访问函数。Use "is" to derive from another contract. Derived
contracts can access all non-private members including internal functions and state variables. These cannot be
accessed externally via `this`, though. 当多重继承时，比如：b is a, c is a, b.虽然a同时被bc继承，但在区块上只会
存在一份合约a。类似c++ virtual继承。
注意多继承重写时，灵活运用super。例程见：http://www.tryblockchain.org/Solidity-Inheritance-%E5%A4%9A%E7%BB%A7%E6%89%BF.html
指定基类合约的继承顺序原则是从most base-like到most derived

修改器(Modifiers)可以用来轻易的改变一个函数的行为。比如用于在函数执行前检查某种前置条件。
修改器是一种合约属性，可被继承，同时还可被派生的合约重写(override)。
修改器的参数可以是任意表达式。在对应的上下文中，所有的函数中引入的符号，在修改器中均可见。但修改器中引入的符号在函数中不可见，因为它们有可能被重写。
http://www.tryblockchain.org/Solidity-FunctionModifiers-%E5%87%BD%E6%95%B0%E4%BF%AE%E6%94%B9%E5%99%A8.html


用于执行回退函数的gas：2300gas。回退函数（每一个合约有且仅有一个没有名字的函数）无参数无返回值。保证回退函数执行花费gas在2300以内（重要）
一个没有定义一个回退函数的合约。如果接收ether，会触发异常，并返还ether（solidity v0.4.0开始）。所以合约要接收ether，必须实现回退函数。

抽象函数是没有函数体的的函数。这样的合约不能通过编译，即使合约内也包含一些正常的函数。但它们可以做为基合约被继承。
如果一个合约从一个抽象合约里继承，但却没实现所有函数，那么它也是一个抽象合约。


使用库合约的合约，可以将库合约视为隐式的父合约(base contracts)，当然它们不会显式的出现在继承关系中。
但调用库函数的方式非常类似，如库L有函数f()，使用L.f()即可访问。此外，internal的库函数对所有合约可见，
如果把库想像成一个父合约就能说得通了。当然调用内部函数使用的是internal的调用惯例，这意味着所有internal类型可以传进去，
memory类型则通过引用传递，而不是拷贝的方式。
为了在EVM中实现这一点，internal的库函数的代码和从其中调用的所有函数将被拉取(pull into)到调用合约中，然后执行一个普通的JUMP来代替DELEGATECALL。

当Solidity合约被部署了，从一个帐户中调用这个合约，需要输入的数据是需要符合the ABI specification。ABI规范需要参数被填充为多个32字节。
当一个值小于256位时，在某些情况下剩余的位必须被清除掉。（编译器做）

【重要】
关于EVM内存优化，见：http://www.tryblockchain.org/Solidity-LayoutOfStateVariablesInStorage-%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B.html

